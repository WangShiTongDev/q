@using DevTeamUp.BLL.DTOs;
@using DevTeamUp.Models;
@model ProfileInitVM

<div class="container">
    <div class="row justify-content-center">

        <div class="card col-lg-8">
            <div class="card-title">
                <h3>Ваш профіль</h3>
            </div>
            <div class="card-body">

                <form asp-action="ProfileInit" id="profileInitForm" method="post">
                    <div class="mb-3">
                        @Html.ValidationMessageFor(model => model.FirstName, "", new { @class = "text-danger" })
                        <input class="form-control" type="text" value="@Model.FirstName" placeholder="Ім'я" name="firstName" required />
                    </div>
                    <div class="mb-3">
                        @Html.ValidationMessageFor(model => model.LastName, "", new { @class = "text-danger" })
                        <input class="form-control" type="text" value="@Model.LastName" placeholder="Прізвище" name="lastName" required />
                    </div>
                    <div class="mb-3">
                        @Html.ValidationMessageFor(model => model.GitHubLink, "", new { @class = "text-danger" })
                        <input class="form-control" type="text" value="@Model.GitHubLink" placeholder="GitHub" name="GitHubLink" required />
                    </div>
                    <div class="mb-3">
                    </div>

                    <div class="form-gorup mb-3">
                        
                        @Html.ValidationMessageFor(model => model.Bio, "", new { @class = "text-danger" })
                        <textarea class="form-control" name="bio" required placeholder="Короткий опис">@Model.Bio</textarea>
                    </div>

                    <div class="form-gorup mb-3">
                        
                        @Html.ValidationMessageFor(model => model.About, "", new { @class = "text-danger" })
                        <textarea class="form-control" name="about" required placeholder="Про себе">@Model.About</textarea>
                    </div>

                    <div class="form-group mb-3">
                        @Html.ValidationMessageFor(model => model.SelectedSkills, "", new { @class = "text-danger" })
                        <select class="form-control selectpicker source" data-live-search="true" >
                            <option value="">Навики</option>
                            @foreach (var item in Model.AvailableSkills)
                            {
                                <option value="@item.Value">@item.Text</option>
                            }

                        </select>
                        <hr />
                        <div class="selected">
                        </div>
                        <div id="hideInputs">
                           
                        </div>
                    </div>

                    <input class="btn btn-success " type="submit" value="Готово" />
                </form>
                
            </div>
        </div>
    </div>
</div>



@section Scripts {


    <script>

        //class SwitchListItems {

        //    #sourceContainer;
        //    #selectedContainer;
        //    #itemClassName = ".listItem"

        //    constructor(sourceContainer, selectedContainer){
        //        this.#sourceContainer = sourceContainer;
        //        this.#selectedContainer = selectedContainer;
                
        //        console.log(this.#selectedContainer);
        //        console.log(this.#sourceContainer);
                
        //        this.#init();
        //    }

        //    #init(){
        //        document.querySelectorAll(this.#itemClassName).forEach( i => {
                    
        //            i.addEventListener('click', e => { this.#toggleSelection(i); })
        //        })
        //    }

        //    #toggleSelection(element){
        //        console.log(element.parentNode);
        //        if (element.parentNode === this.#sourceContainer) {
        //            this.#sourceContainer.removeChild(element);
        //            this.#selectedContainer.appendChild(element);

        //        } else if (element.parentNode === this.#selectedContainer) {
        //            this.#selectedContainer.removeChild(element);
        //            this.#sourceContainer.appendChild(element);
        //        }
        //    }

        //    createHiddenInputs(name){
        //        return Array.from (this.#selectedContainer.querySelectorAll(this.#itemClassName))
        //        .map( item => {
        //            return $(` <input type="hidden" name="${name}" value="${item.dataset.id}">`)[0];
        //        });
        //    }
        //}
        
        let source = document.querySelector('.source');
        let selected = document.querySelector('.selected')
        let hideInputs = document.querySelector('#hideInputs')

        let form = document.querySelector('#profileInitForm');


        let skillsSelect = new MySelect(hideInputs, source, selected, 'SelectedSkills');

        //form.addEventListener('submit', e =>{
            
        //    let hiddenInputsContainer = document.querySelector('.hiddenInputs');
        //    hiddenInputsContainer.innerHTML = '';

        //    let hiddeInputs = test.createHiddenInputs('technologies');
        //    hiddeInputs.forEach(i => $(hiddenInputsContainer).append(i));

        //})

    </script>
}